// MAP 562 2018-2019
// G. Allaire, B. Bogosel
//
// Geometric optimization for "simple" domains
// Optimize the shape and position of an ellipse

// Parameter for the initial ellipse and the bounding box

real a=0.5,b=1,l=2;
// Center of the ellipse
real cx = 0,cy=0;
// Number of iterations
int maxiter = 100;
real maxstep = 0.01; // maximum step size

real fixedV = 1;   // Fixed volume of the ellipse

real step = 0.01;

verbosity = 0;

// Vary the parameter alpha below and observe the results
real alpha =0.5;

real E=1;			// Young modulus
real nu=0.3;			// Poisson coefficient (between -1 and 1/2)

real lambda=E*nu/((1.+nu)*(1.-2.*nu));
real mu=E/(2.*(1.+nu));

int NN = 10;
int Ni = 2;

int GammaD = 0,GammaN = 1,Gamma0=20;

border left(t=l,-l){x=-l;y=t;label=GammaD;}
border bot(t=-l,l){x=t;y=-l;label=GammaN;}
border right(t=-l,l){x=l;y=t;label=GammaN;}
border top(t=l,-l){x=t;y=l;label=GammaN;}

border ellipse(t=0,2*pi){
   x = a*cos(t)+cx;
   y = b*sin(t)+cy;
   label = Gamma0;
}

plot(left(2*NN)+bot(2*NN)+right(2*NN)+top(2*NN)
                   +ellipse(Ni*(a+b)*pi*NN));

// Recall that the ellipse has area a*b*pi
// rescale the ellipse to the desired area
real ratio = a*b*pi/fixedV;
   a = a/sqrt(ratio);
   b = b/sqrt(ratio);

// build the mesh
mesh Th = buildmesh(left(2*NN)+bot(2*NN)+right(2*NN)+top(2*NN)
                   +ellipse(-Ni*(a+b)*pi*NN));

plot(Th);

fespace Vh(Th,P1);
fespace Vh0(Th,P0);

Vh ux,uy,vx,vy;

// some macros
real sqrt2 = sqrt(2);
macro e(ux,uy) [dx(ux),dy(uy),(dx(uy)+dy(ux))/sqrt2]//
macro div(ux,uy) (dx(ux)+dy(uy))//
macro Aeueu(ux,uy) (2*mu*e(ux,uy)'*e(ux,uy)+lambda*div(ux,uy)*div(ux,uy))//


// The elasticity problem
problem elasticity([ux,uy],[vx,vy],solver=sparsesolver) =
  int2d(Th)(2*mu*e(ux,uy)'*e(vx,vy)+lambda*div(ux,uy)*div(vx,vy))
 -int1d(Th,GammaN)(N.x*vx+alpha*N.y*vy)
 +on(GammaD,ux=0,uy=0);

elasticity;
plot([ux,uy]);


// Compare the two ways of computing the compliance
real compliance = int2d(Th)(Aeueu(ux,uy));
cout << "Compliance: " << compliance << endl;

real compliance2 = int1d(Th,GammaN)(N.x*ux+alpha*N.y*uy);
cout << "Compliance: " << compliance2 << endl;

Vh0 grad;

// Compute the gradient for the elasticity problem
grad = -Aeueu(ux,uy);

real valold = 1e100;

real aold,bold,cxold,cyold;



aold = a;
bold = b;
cxold = cx;
cyold = cy;

for(int i=1;i<maxiter;i++){

   // Write here the derivatives with respect to the center 
   real derivx = 0;
   real derivy = 0;
   // Write here the derivatives with respect to a and b
   real deriva = 0;
   real derivb = 0;


   cout << "Derivatives - Center: " << derivx << " " << derivy << endl;
   cout << "Derivatives - a and b " << deriva << " " << derivb << endl;

   cx = cx-step*derivx;
   cy = cy-step*derivy;

   a  = a-step*deriva;
   b  = b-step*derivb;

   // Constraints on a,b: the ellipse should stay in the box
   a  = max(0.01,min(l-0.01,a));
   b  = max(0.01,min(l-0.01,b));
   
   
   // volume constraint
   real ratio = a*b*pi/fixedV;
   a = a/sqrt(ratio);
   b = b/sqrt(ratio);

   // Constraints on the center: the ellipse should stay in the box
   cx = max(cx,-l+a+0.1);
   cx = min(cx,l-a-0.1);

   //cout << cx << " " << cy << endl;
   //cout << a << " " << b << endl;

   // Build the new mesh
   Th = buildmesh(left(2*NN)+bot(2*NN)+right(2*NN)+top(2*NN)
                   +ellipse(-Ni*(a+b)*pi*NN));


   plot(Th,wait=1);

   elasticity;
   real compliance = int2d(Th)(Aeueu(ux,uy));
       cout << "Compliance: " << compliance << endl; 

   if(compliance<valold*1.00001){
       cout << "Accept" << endl;
        grad = -Aeueu(ux,uy);
        step = min(maxstep,1.1*step);
        aold = a;
        bold = b;
        cxold = cx;
        cyold = cy;
        valold = compliance;
   }
   else{ 
        cout << " Reject" << endl;
        step = step*0.5;
        a = aold;b=bold;cx=cxold;cy=cyold;
   }

}


