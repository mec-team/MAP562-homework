// MAP 562 
// G. Allaire, B. Bogosel

// Geometric optimization of a parametric hole

real a=0.5,b=0.1,l=2.5;
real cx = 0,cy=0;
int maxiter = 2;
real maxstep = 0.01;

real fixedV = 1;

real step = 0.01;

verbosity = 0;

real alpha =0.5;

real E=1;			// Young modulus
real nu=0.3;			// Poisson coefficient (between -1 and 1/2)

real lambda=E*nu/((1.+nu)*(1.-2.*nu));
real mu=E/(2.*(1.+nu));

int NN = 10;
int Ni = 10;

int GammaD = 0,GammaN = 1,Gamma0=20;

border left(t=l,-l){x=-l;y=t;label=GammaD;}
border bot(t=-l,l){x=t;y=-l;label=GammaN;}
border right(t=-l,l){x=l;y=t;label=GammaN;}
border top(t=l,-l){x=t;y=l;label=GammaN;}

// Parametric boundary
border inclusion(t=0,2*pi){
   x = (1+a*cos(2*t)+b*cos(3*t))*cos(t);
   y = (1+a*cos(2*t)+b*cos(3*t))*sin(t);
   label = Gamma0;
}

plot(left(2*NN)+bot(2*NN)+right(2*NN)+top(2*NN)
                   +inclusion(Ni*(a+b)*pi*NN));

mesh Th = buildmesh(left(2*NN)+bot(2*NN)+right(2*NN)+top(2*NN)
                   +inclusion(-Ni*NN));

plot(Th);

// Compute the area
cout << "Area of the mesh  " << Th.area << endl;
cout << "Area of omega     " << (2*l)^2-Th.area << endl;
// Use the formula below to rescale to the desired area
// The formula can be proved using polar coordinates: try it...
real analyticArea = 2*pi*(0.5+0.25*a^2+0.25*b^2);
cout << "Analytic formula  " << analyticArea << endl;
// If you want to see closer results between the analytical and discrete formulas, increase the number of points on the boundary of omega... 
// ==== 

fespace Vh(Th,P1);
fespace Vh0(Th,P0);

Vh ux,uy,vx,vy;


real sqrt2 = sqrt(2);
macro e(ux,uy) [dx(ux),dy(uy),(dx(uy)+dy(ux))/sqrt2]//
macro div(ux,uy) (dx(ux)+dy(uy))//
macro Aeueu(ux,uy) (2*mu*e(ux,uy)'*e(ux,uy)+lambda*div(ux,uy)*div(ux,uy))//

problem elasticity([ux,uy],[vx,vy],solver=sparsesolver) =
  int2d(Th)(2*mu*e(ux,uy)'*e(vx,vy)+lambda*div(ux,uy)*div(vx,vy))
 -int1d(Th,GammaN)(N.x*vx+alpha*N.y*vy)
 +on(GammaD,ux=0,uy=0);

elasticity;
plot([ux,uy]);

real compliance = int2d(Th)(Aeueu(ux,uy));
cout << "Compliance: " << compliance << endl;

real compliance2 = int1d(Th,GammaN)(N.x*ux+alpha*N.y*uy);
cout << "Compliance: " << compliance2 << endl;

Vh0 grad;
grad = -Aeueu(ux,uy);

real valold = 1e100;

real aold,bold,cxold,cyold;


aold = a;
bold = b;
cxold = cx;
cyold = cy;

for(int i=1;i<maxiter;i++){
   // Compute angles in polar coordinates
   Vh thetas = atan2(y,x);
   plot(thetas,fill=1,wait=1,cmm="Compute the angles for the shape derivative");

   // Compute here the derivatives with respect to a and b
   // use the variable thetas defined above to have the angle in polar coordinates
   real deriva = 0;
   real derivb = 0;

   cout << deriva << " " << derivb << endl;


   a  = a-step*deriva;
   b  = b-step*derivb;

   a  = max(0.01,min(l-0.01,a));
   b  = max(0.01,min(l-0.01,b));
   
   // Project on the area constraint...
   // Write the formula by hand and then implement it.
   // Check that it works by showing the area of the mesh at each iteration

  

   Th = buildmesh(left(2*NN)+bot(2*NN)+right(2*NN)+top(2*NN)
                   +inclusion(-Ni*(a+b)*pi*NN));


   plot(Th,wait=1);

   elasticity;
   real compliance = int2d(Th)(Aeueu(ux,uy));


   if(compliance<valold){
       cout << "Accept" << endl;
       cout << "Compliance: " << compliance << endl; 
        grad = -Aeueu(ux,uy);
        step = min(maxstep,1.1*step);
        aold = a;
        bold = b;
        cxold = cx;
        cyold = cy;
        valold = compliance;
   }
   else{ 
        cout << " Reject" << endl;
        step = step*0.5;
        a = aold;b=bold;cx=cxold;cy=cyold;
   }



}


