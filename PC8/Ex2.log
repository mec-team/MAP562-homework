-- FreeFem++ v4.400003 (jeu. 12 dÃ©c. 2019 13:58:15 - git v4.4-3-9-gc37e08e1)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : // Problem of a periodic cell       //
    2 : // MAP562                           //
    3 : // G. Allaire, N.Spillane, T. Wick  //
    4 : //
    5 :
    6 : // In this program, we solve
    7 : // a cell problem; namely a composite
    8 : // material (two phases) with the coefficients
    9 : // alpha and beta
   10 :
   11 : // Material parameters, "two-phases"
   12 : // The two parameters are scalar,
   13 : // thus the two phases are isotropic.
   14 : real alpha=1.;
   15 : real beta=10.;
   16 :
   17 : real cx=0.5,cy=0.5;
   18 : real r = 0.3;
   19 : real a = 0.3,b=0.3;
   20 :
   21 : // Coefficients of the homogenized tensor A*
   22 : real A11, A12, A21, A22 ;
   23 : string legende ;
   24 :
   25 :
   26 : // Definition of the domain   //
   27 : mesh Sh;
   28 :
   29 : real pi=4*atan(1) ;
 *** Warning  The identifier pi hide a Global identifier
 
   30 : real theta1=0.8;
   31 : real theta2=0.4;
   32 : real theta=theta1*theta2;
   33 : real m1=(1-theta1)/(1-theta);
   34 : real m2=theta1*(1-theta2)/(1-theta1*theta2);
   35 :
   36 : //  Top boundary
   37 : border a1(t=1,0) { x=t; y=1;label=1; };
   38 : // Left boundary
   39 : border a2(t=1,0)  { x=0; y=t;label=2; };
   40 : // Bottom boundary
   41 : border a3(t=0,1) { x=t; y=0;label=3; };
   42 : // Right boundary
   43 : border a4(t=0,1) { x=1; y=t;label=4; };
   44 :
   45 : // Boundaries for material A
   46 : real L=1/(4-theta1);
   47 : real h=theta2;
   48 : real hmin=0.001;
   49 :
   50 : //Rectangle 1 for material A
   51 : //  Top boundary1
   52 : border B1(t=L,L*(1-theta1)) { x=t; y=h;label=5; };
   53 : // Left boundary1
   54 : border B2(t=h,hmin)  { x=L*(1-theta1); y=t;label=5; };
   55 : // Bottom boundary1
   56 : border B3(t=L*(1-theta1),L) { x=t; y=hmin;label=5; };
   57 : // Right boundary1
   58 : border B4(t=hmin,h) { x=L; y=t;label=5; };
   59 :
   60 : //Rectangle 2 for material A
   61 : //  Top boundary1
   62 : border B5(t=L,L*(1-theta1)) { x=t+L; y=h;label=5; };
   63 : // Left boundary1
   64 : border B6(t=h,hmin)  { x=L*(1-theta1)+L; y=t;label=5; };
   65 : // Bottom boundary1
   66 : border B7(t=L*(1-theta1),L) { x=t+L; y=hmin;label=5; };
   67 : // Right boundary1
   68 : border B8(t=hmin,h) { x=L+L; y=t;label=5; };
   69 :
   70 : //Rectangle 3 for material A
   71 : //  Top boundary1
   72 : border B9(t=L,L*(1-theta1)) { x=t+2*L; y=h;label=5; };
   73 : // Left boundary1
   74 : border B10(t=h,hmin)  { x=L*(1-theta1)+2*L; y=t;label=5; };
   75 : // Bottom boundary1
   76 : border B11(t=L*(1-theta1),L) { x=t+2*L; y=hmin;label=5; };
   77 : // Right boundary1
   78 : border B12(t=hmin,h) { x=3*L; y=t;label=5; };
   79 :
   80 : // Mesh                     //
   81 : int n=8;
   82 : Sh= buildmesh (a1(5*n)+a2(5*n)+a3(5*n)+a4(5*n)+B1(5*n)+B2(5*n)+B3(5*n)+B4(5*n)+B5(5*n)+B6(5*n)+B7(5*n)+B8(5*n)+B9(5*n)+B10(5*n)+B11(5*n)+B12(5*n));
   83 : plot(Sh,wait=1);
   84 :
   85 : // Define FEM spaces
   86 : // Notice the periodic boundary conditions defined using
   87 : // the labels and the periodic variable on the corresponding edge
   88 : fespace Vh1(Sh,P1,periodic=[ [1,x],[3,x],[2,y],[4,y] ]);
   89 :
   90 : // Solution variables: u1 and u2
   91 : // Test function: phi
   92 : Vh1 u1,u2,phi;
   93 :
   94 : // Definition of the P0 space for the coefficient
   95 : // Furthermore we define the characteristic function
   96 : fespace Vh0(Sh,P0);
   97 : Vh0 Ay , reg=region;    // Region labels
   98 :
   99 : //////////////////////////////
  100 : // Definition of the coefficients for each composite
  101 : // as shown in the lecture notes
  102 :
  103 : // This works since regions are labeled 0 or 1. You should check that this is the case. In more general situations make sure that in the end you have the right description in terms of the region.
  104 :
  105 : Ay = alpha*reg + beta*(1.-reg) ;
  106 : plot(Sh,Ay,fill=1,wait=1,value=true);
  107 :
  108 : // Defining the cell equations//
  109 :
  110 : // -div_y (A(y)(e_i + \nabla_y w_i(y))) = 0
  111 : // y -> w_i(y) is Y-periodic
  112 :
  113 : macro grad(u) [dx(u),dy(u)] )  //
  114 :
  115 : problem cell1(u1,phi) =
  116 :     int2d(Sh)(Ay*grad(u1)  [dx(u1),dy(u1)]'*grad(phi)  [dx(phi),dy(phi)])
  117 :    +int2d(Sh)(Ay*dx(phi))
  118 : ;
  119 :
  120 : problem cell2(u2,phi) =
  121 :     int2d(Sh)(Ay*grad(u2)  [dx(u2),dy(u2)]'*grad(phi)  [dx(phi),dy(phi)])
  122 :    +int2d(Sh)(Ay*dy(phi))
  123 : ;
  124 :
  125 : // Solve the cell problems
  126 : cell1;
  127 : cell2;
  128 :
  129 : // Compute the entries of the homogenized tensor A*
  130 : //A11 = int2d(Sh)( Ay*((dx(u1)+1.)*(dx(u1)+1.)+dy(u1)*dy(u1)) ) ;
  131 : //A22 = int2d(Sh)( Ay*((dy(u2)+1.)*(dy(u2)+1.)+dx(u2)*dx(u2)) ) ;
  132 : //A12 = int2d(Sh)( Ay*((dx(u1)+1.)*dx(u2) + dy(u1)*(dy(u2)+1.)) ) ;
  133 : //A21 = int2d(Sh)( Ay*((dx(u1)+1.)*dx(u2) + dy(u1)*(dy(u2)+1.)) ) ;
  134 :
  135 : A11 = int2d(Sh)( Ay*([1,0]+grad(u1)  [dx(u1),dy(u1)])'*([1,0]+grad(u1)  [dx(u1),dy(u1)]) ) ;
  136 : A21 = int2d(Sh)( Ay*([1,0]+grad(u1)  [dx(u1),dy(u1)])'*([0,1]+grad(u2)  [dx(u2),dy(u2)]) ) ;
  137 : A12 = int2d(Sh)( Ay*([0,1]+grad(u2)  [dx(u2),dy(u2)])'*([1,0]+grad(u1)  [dx(u1),dy(u1)]) ) ;
  138 : A22 = int2d(Sh)( Ay*([0,1]+grad(u2)  [dx(u2),dy(u2)])'*([0,1]+grad(u2)  [dx(u2),dy(u2)]) ) ;
  139 :
  140 :
  141 : /////////////////////////////////////////
  142 : // Output and visualization            //
  143 : /////////////////////////////////////////
  144 : cout<<"Homogenized coefficients" << endl;
  145 : cout <<" A11_task1 = " << A11 <<endl;
  146 : cout <<" A12_task1 = " << A12 <<endl;
  147 : cout <<" A21_task1 = " << A21 <<endl;
  148 : cout <<" A22_task1 = " << A22 <<endl;
  149 :
  150 : //legende="Cell 1 problem, A11="+A11;
  151 : //plot(Sh,u1,fill=1,wait=1,value=true,cmm=legende);
  152 :
  153 : //legende="Cell 2 problem, A22="+A22;
  154 : //plot(Sh,u2,fill=1,wait=1,value=true,cmm=legende);
  155 :
  156 : real A = 1;
  157 : real B = 2;
  158 : real A11t2,A12t2,A21t2,A22t2;
  159 : A11t2 = ((A-B)+(1-theta)*(m1/B))/theta + B;
  160 : A12t2 = 0;
  161 : A21t2 = 0;
  162 : A22t2 = ((A-B)+(1-theta)*(m2/B))/theta + B;
  163 : cout<<"Homogenized coefficients" << endl;
  164 : cout <<" A11_task2 = " << A11t2 <<endl;
  165 : cout <<" A12_task2 = " << A12t2 <<endl;
  166 : cout <<" A21_task2 = " << A21t2 <<endl;
  167 : cout <<" A22_task2 = " << A22t2 <<endl; sizestack + 1024 =3136  ( 2112 )
 
  --  mesh:  Nb of Triangles =  16864, Nb of Vertices 8513
  -- Solve :
          min -0.217325  max 0.266543
  -- Solve :
          min -0.249146  max 0.173356
Homogenized coefficients
 A11_task1 = -62.7438
 A12_task1 = 0.0077924
 A21_task1 = 0.0077924
 A22_task1 = -60.8965
Homogenized coefficients
 A11_task2 = -0.8125
 A12_task2 = 0
 A21_task2 = 0
 A22_task2 = -0.375
times: compile 0.304s, execution 0.98s,  mpirank:0
 ######## We forget of deleting   -2 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0
 CodeAlloc : nb ptr  4269,  size :488928 mpirank: 0
Ok: Normal End
 try getConsole F:\github-clone\MAP562-homework\PC8\Ex2.edp
