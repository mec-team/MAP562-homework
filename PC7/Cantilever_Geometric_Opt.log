-- FreeFem++ v4.400003 (jeu. 12 d√©c. 2019 13:58:15 - git v4.4-3-9-gc37e08e1)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : /* Geometric optimization of the shape of a cantilever */
    2 : load "medit"(load: loadLibary D:\Softwares\FreeFem++\\.\medit = 0)
    3 :
    4 : verbosity = 0;
    5 :
    6 : int Gamma=0,GammaN=2,GammaD=1;
    7 :
    8 : /* Border of the initial domain */
    9 : border left1(t=0.0,0.1){x = 0.0; y = 1.0-t; label = GammaD;};
   10 : border left2(t=0.1,0.9){x = 0.0; y = 1.0-t; label = Gamma;};
   11 : border left3(t=0.9,1.0){x = 0.0; y = 1.0-t; label = GammaD;};
   12 : border bottom(t=0.0,2.0){x=1.0/2.0*t; y= 0.2*t; label=Gamma;};
   13 : border right(t=0.0,0.2){x = 1.0; y = 0.4+t; label = GammaN;};
   14 : border top(t=0.0,2.0){x =1.0-1.0/2.0*t; y = 0.6+0.2*t; label = Gamma;};
   15 : border h1 (t=0.0,2.0*pi){x=0.2+0.05*cos(t); y=0.65+0.05*sin(t); label=Gamma;};
   16 : border h2 (t=0.0,2.0*pi){x=0.1+0.05*cos(t); y=0.5+0.05*sin(t); label=Gamma;};
   17 : border h3 (t=0.0,2.0*pi){x=0.2+0.05*cos(t); y=0.35+0.05*sin(t); label=Gamma;};
   18 : border h4 (t=0.0,2.0*pi){x=0.4+0.05*cos(t); y=0.5+0.05*sin(t); label=Gamma;};
   19 : border h5 (t=0.0,2.0*pi){x=0.6+0.05*cos(t); y=0.4+0.05*sin(t); label=Gamma;};
   20 : border h6 (t=0.0,2.0*pi){x=0.75+0.05*cos(t); y=0.5+0.05*sin(t); label=Gamma;};
   21 : border h7 (t=0.0,2.0*pi){x=0.6+0.05*cos(t); y=0.6+0.05*sin(t); label=Gamma;};
   22 :
   23 : /* Create, then display initial mesh */
   24 : mesh Th = buildmesh( left1(10) + left2(30) + left3(10) + bottom(100) + right(20)
   25 :            + top(100) + h1(-10) + h2(-10) + h3(-10) + h4(-10) + h5(-10) + h6(-10) + h7(-10) );
   26 : plot(Th,wait=0);
   27 :
   28 : plot(Th,wait=1);
   29 :
   30 : /* Parameters */
   31 : real eps = 1.e-6;
   32 : real gx = 0.0;
   33 : real gy = -1.0;
   34 : real mu = 0.3846;
   35 : real lambda = 0.5769;
   36 : real cply = 0.0;
   37 : real obj = 0.0,newobj = 0.0;
   38 : mesh Dh;
   39 : int nit = 200;
   40 :
   41 : real gmax;
   42 : real coef = 0.1;
   43 : real coefmax = 0.2;
   44 : real coefmin = 0.01;
   45 : real step;
   46 : real chkvoltri;
   47 : real epsvoltri = 1.e-6;
   48 : real tol = 0.01;
   49 : real tgv = 1.e10;
 *** Warning  The identifier tgv hide a Global identifier
 
   50 : real vol = 0.0;
   51 : real ell = 5.0;
   52 : real muel = 0.3846;
   53 : real lambdael = 0.5769;
   54 : string s;
   55 :
   56 : /* Finite element spaces: P1 elements for the resolution of the linearized elasticity system */
   57 : fespace Vh(Th,P1);
   58 : fespace Vh0(Th,P0);
   59 :
   60 : /* Functions */
   61 : Vh   ux,uy,vx,vy,grx,gry,ng,uox,uoy,chidir;
   62 : Vh0  gr0;
   63 :
   64 : Vh0 hMax = hTriangle; // get sizes of all triangles
   65 : real meshsiz = hMax[].max; // get maximal triangle size
   66 : real alpha = (2.0*meshsiz)^2; //regularization parameter
   67 :
   68 : macro div(ux,uy) (dx(ux)+dy(uy)) )  //
   69 : real sqrt2 = sqrt(2);
   70 : macro e(ux,uy) [dx(ux),dy(uy),(dx(uy)+dy(ux))/sqrt2] )  //
   71 : macro grad(u) [dx(u),dy(u)] )  //
   72 : macro grad2(ux,uy) [dx(ux),dy(ux),dx(uy),dy(uy)] )  //
   73 : macro Aeueu(ux,uy) (2*mu*e(ux,uy)'*e(ux,uy)+lambda*div(ux,uy)*div(ux,uy)) )  //
   74 :
   75 :
   76 : /* Linearized elasticity system */
   77 :
   78 : problem elas([ux,uy],[vx,vy],solver=Crout) =
   79 :   int2d(Th)( 2.0*mu*e(ux,uy)  [dx(ux),dy(uy),(dx(uy)+dy(ux))/sqrt2]'*e(vx,vy)  [dx(vx),dy(vy),(dx(vy)+dy(vx))/sqrt2]
   80 :               + lambda*div(ux,uy)  (dx(ux)+dy(uy))*div(vx,vy)  (dx(vx)+dy(vy)) )
   81 :   - int1d(Th,GammaN)(gx*vx+gy*vy)
   82 :   + on(GammaD,ux=0.0,uy=0.0);
   83 :
   84 : /* Localization function for nodes to be frozen */
   85 : func real locdir() {
   86 :   if ( ( ( y < 0.1 || y > 0.9 ) && x < 0.01 ) || ( x > 1.99 ) ) return(1.0);
   87 :   else return(0.0);
   88 : }
   89 : chidir = locdir();
   90 :
   91 : /* Tangential derivative */
   92 : macro Dt(u) [dx(u)-(dx(u)*N.x+dy(u)*N.y)*N.x,dy(u)-(dx(u)*N.x+dy(u)*N.y)*N.y]  )  // EOM
   93 :
   94 : /* Extension / regularization problem */
   95 : problem velext([grx,gry],[vx,vy],solver=Crout) =
   96 :   int2d(Th)(mu*(2.0*dx(grx)*dx(vx) + (dx(gry)+dy(grx))*(dx(vy)+dy(vx)) + 2.0*dy(gry)*dy(vy))
   97 :                 + lambda*(dx(grx)+dy(gry))*(dx(vx)+dy(vy)) + (1.0+chidir*tgv)*(grx*vx+gry*vy) )
   98 :   + int1d(Th,Gamma)( alpha*(Dt(grx)   [dx(grx)-(dx(grx)*N.x+dy(grx)*N.y)*N.x,dy(grx)-(dx(grx)*N.x+dy(grx)*N.y)*N.y] '*Dt(vx)   [dx(vx)-(dx(vx)*N.x+dy(vx)*N.y)*N.x,dy(vx)-(dx(vx)*N.x+dy(vx)*N.y)*N.y]  + Dt(gry)   [dx(gry)-(dx(gry)*N.x+dy(gry)*N.y)*N.x,dy(gry)-(dx(gry)*N.x+dy(gry)*N.y)*N.y] '*Dt(vy)   [dx(vy)-(dx(vy)*N.x+dy(vy)*N.y)*N.x,dy(vy)-(dx(vy)*N.x+dy(vy)*N.y)*N.y] ) )
   99 :   - int1d(Th,Gamma)( gr0*(N.x*vx+N.y*vy) )
  100 :   + on(GammaD,GammaN,grx=0.0,gry=0.0);
  101 :
  102 : problem velext2([grx,gry],[vx,vy],solver=Crout) =
  103 :   int2d(Th)(grad2(grx,gry)  [dx(grx),dy(grx),dx(gry),dy(gry)]'*grad2(vx,vy)  [dx(vx),dy(vx),dx(vy),dy(vy)]
  104 : //  + int1d(Th,omega)( alpha*(Dt(grx)'*Dt(vx) + Dt(gry)'*Dt(vy)) )
  105 :  + (1.0+chidir*tgv)*(grx*vx+gry*vy) )
  106 :   - int1d(Th,Gamma)( gr0*(N.x*vx+N.y*vy) )
  107 :   + on(GammaN,GammaD,grx=0.0,gry=0.0);
  108 :
  109 : problem velext3([grx,gry],[vx,vy],solver=Crout) =
  110 :   int2d(Th)(2*e(grx,gry)  [dx(grx),dy(gry),(dx(gry)+dy(grx))/sqrt2]'*e(vx,vy)  [dx(vx),dy(vy),(dx(vy)+dy(vx))/sqrt2]+0.5*div(grx,gry)  (dx(grx)+dy(gry))*div(vx,vy)  (dx(vx)+dy(vy))
  111 : //  + int1d(Th,omega)( alpha*(Dt(grx)'*Dt(vx) + Dt(gry)'*Dt(vy)) )
  112 : +(1.0+chidir*tgv)*(grx*vx+gry*vy) )
  113 :   - int1d(Th,Gamma)( gr0*(N.x*vx+N.y*vy) )
  114 :   + on(GammaN,GammaD,grx=0.0,gry=0.0);
  115 :
  116 :
  117 : /* Objective function */
  118 : macro J() ( int1d(Th,GammaN)(gx*ux+gy*uy)) // EOM
  119 :
  120 : ///  int1d(Th,GammaN)(Aeueu(ux,uy))  compliance...
  121 :
  122 : /* (Negative) shape gradient of J */
  123 : macro dJ() {
  124 #   gr0 = 2.0*mu*(dx(ux)*dx(ux) + 0.5*(dy(ux)+dx(uy))*(dy(ux)+dx(uy)) + dy(uy)*dy(uy)) + lambda*(dx(ux)+dy(uy))*(dx(ux)+dy(uy)) - ell;
  125 #   velext2;
  126 # } // EOM
  127 :
  128 : /* Initialization */
  129 : elas;
  130 :
  131 : /* Initial value of the objective function */
  132 : vol     = Th.area;
  133 : obj     = J    ( int1d(Th,GammaN)(gx*ux+gy*uy))  + ell*vol;
  134 :
  135 : /* Main optimization loop */
  136 : for(int n=0; n<nit; n++){
  137 :
  138 :   /* Computation of the shape gradient as a P1 function and size of the time step */
  139 :   dJ
  124 @
  125 @
  126 @   {
  124 @   gr0 = 2.0*mu*(dx(ux)*dx(ux) + 0.5*(dy(ux)+dx(uy))*(dy(ux)+dx(uy)) + dy(uy)*dy(uy)) + lambda*(dx(ux)+dy(uy))*(dx(ux)+dy(uy)) - ell;
  125 @   velext2;
  126 @ } ;
  140 :   ng = sqrt(grx*grx+gry*gry);
  141 :   gmax = ng[].max;
  142 :   step = coef*meshsiz / (eps^2+gmax);
  143 :
  144 :   /* Attempt motion of the mesh: if the moved mesh has an almost null or flipped element, restart the operation
with a smaller step */
  145 :   chkvoltri = checkmovemesh(Th,[x+step*grx,y+step*gry]);
  146 :
  147 :   if( chkvoltri < epsvoltri ) {
  148 :     cout<<"Iteration "<<n<<" rejected; inverted triangle."<<endl;
  149 :     coef *= 0.5;
  150 :     continue;
  151 :   }
  152 :
  153 :   /* Else, effectively move the new mesh */
  154 :     Dh = movemesh(Th,[x+step*grx,y+step*gry]);
  155 :
  156 :   /* Resolution of the state equation */
  157 :   uox = ux;
  158 :   uoy = uy;
  159 :   elas;
  160 :
  161 :   /* Evaluation of the new objective function */
  162 :   vol    = Th.area;
  163 :   newobj = J    ( int1d(Th,GammaN)(gx*ux+gy*uy))  + ell*vol;
  164 :
  165 :   /* Decision */
  166 :   if( newobj < obj+tol*abs(obj) || coef <= coefmin ) {
  167 :     cout<<"Iteration "<<n<<" accepted; objective: "<<obj<<" ---> "<<newobj<<endl;
  168 :     cout<<"Volume: " << vol << endl;
  169 :     obj   = newobj;
  170 :     coef  = min(coefmax,1.02*coef);
  171 :     Th    = Dh;
  172 :
  173 :     /* Adapt the mesh to the current solution of the elasticity system */
  174 :
  175 :     Th = adaptmesh(Th,[ux,uy],hmin=0.01,hmax=0.02);
  176 :
  177 :     hMax = hTriangle; // get sizes of all triangles
  178 :     meshsiz = hMax[].max; // get maximal triangle size
  179 :     cout << meshsiz << endl;
  180 :     alpha = (2.0*meshsiz)^2;
  181 :     chidir = locdir();
  182 :     plot(Th,wait=0);
  183 :   }
  184 :   else {
  185 :     cout<<"Iteration "<<n<<" rejected; objective: "<<obj<<" v.s. "<<newobj<<endl;
  186 :     coef  = max(coefmin,0.6*coef);
  187 :     ux    = uox;
  188 :     uy    = uoy;
  189 :   }
  190 : }
  191 :
  192 : /* Print mesh and solution */
  193 : //savemesh(Th,"Cantilever.mesh");
  194 : //savesol("Cantilever.sol",Th,[ux,uy]);
  195 :  sizestack + 1024 =19408  ( 18384 )
 
Iteration 0 accepted; objective: 3.48268 ---> 3.48268
Volume: 0.548569
0.0298184
Iteration 1 accepted; objective: 3.48268 ---> 3.47117
Volume: 0.545258
0.0292842
Iteration 2 accepted; objective: 3.47117 ---> 3.46117
Volume: 0.542947
0.0288786
Iteration 3 accepted; objective: 3.46117 ---> 3.45126
Volume: 0.540904
0.0292665
Iteration 4 accepted; objective: 3.45126 ---> 3.44143
Volume: 0.538867
0.0293392
Iteration 5 accepted; objective: 3.44143 ---> 3.43115
Volume: 0.536794
0.0293135
Iteration 6 accepted; objective: 3.43115 ---> 3.42058
Volume: 0.53468
0.0299737
Iteration 7 accepted; objective: 3.42058 ---> 3.40979
Volume: 0.532541
0.029876
Iteration 8 accepted; objective: 3.40979 ---> 3.39863
Volume: 0.530325
0.0297541
Iteration 9 accepted; objective: 3.39863 ---> 3.38726
Volume: 0.528081
0.0296323
Iteration 10 accepted; objective: 3.38726 ---> 3.37576
Volume: 0.525815
0.0295108
Iteration 11 accepted; objective: 3.37576 ---> 3.36416
Volume: 0.523527
0.0293898
Iteration 12 accepted; objective: 3.36416 ---> 3.35246
Volume: 0.521232
0.0292693
Iteration 13 accepted; objective: 3.35246 ---> 3.34042
Volume: 0.518908
0.0291481
Iteration 14 accepted; objective: 3.34042 ---> 3.3282
Volume: 0.516565
0.0290273
Iteration 15 accepted; objective: 3.3282 ---> 3.31579
Volume: 0.514187
0.0289067
Iteration 16 accepted; objective: 3.31579 ---> 3.30318
Volume: 0.511779
0.0287844
Iteration 17 accepted; objective: 3.30318 ---> 3.29046
Volume: 0.509362
0.0299681
Iteration 18 accepted; objective: 3.29046 ---> 3.27755
Volume: 0.506901
0.0299294
Iteration 19 accepted; objective: 3.27755 ---> 3.2638
Volume: 0.504266
0.0298959
Iteration 20 accepted; objective: 3.2638 ---> 3.2498
Volume: 0.5016
0.0298623
Iteration 21 accepted; objective: 3.2498 ---> 3.23557
Volume: 0.49885
0.0298362
Iteration 22 accepted; objective: 3.23557 ---> 3.22114
Volume: 0.496126
0.0298059
Iteration 23 accepted; objective: 3.22114 ---> 3.20568
Volume: 0.49312
0.0297843
Iteration 24 accepted; objective: 3.20568 ---> 3.1909
Volume: 0.490334
0.0297701
Iteration 25 accepted; objective: 3.1909 ---> 3.17596
Volume: 0.487487
0.0297619
Iteration 26 accepted; objective: 3.17596 ---> 3.16051
Volume: 0.484601
0.0297498
Iteration 27 accepted; objective: 3.16051 ---> 3.14473
Volume: 0.481572
0.0297437
Iteration 28 accepted; objective: 3.14473 ---> 3.1287
Volume: 0.478469
0.0297348
Iteration 29 accepted; objective: 3.1287 ---> 3.11251
Volume: 0.475317
0.030138
Iteration 30 accepted; objective: 3.11251 ---> 3.09599
Volume: 0.472145
0.0297455
Iteration 31 accepted; objective: 3.09599 ---> 3.0791
Volume: 0.468915
0.0297525
Iteration 32 accepted; objective: 3.0791 ---> 3.06217
Volume: 0.465748
0.0297541
Iteration 33 accepted; objective: 3.06217 ---> 3.0449
Volume: 0.462422
0.0298407
Iteration 34 accepted; objective: 3.0449 ---> 3.02738
Volume: 0.459089
0.0299014
Iteration 35 accepted; objective: 3.02738 ---> 3.00952
Volume: 0.455558
0.0297831
Iteration 36 accepted; objective: 3.00952 ---> 2.99142
Volume: 0.452062
0.0301287
Iteration 37 accepted; objective: 2.99142 ---> 2.97374
Volume: 0.44867
0.0305614
Iteration 38 accepted; objective: 2.97374 ---> 2.95619
Volume: 0.445183
0.0308454
Iteration 39 accepted; objective: 2.95619 ---> 2.93802
Volume: 0.44158
0.0310679
Iteration 40 accepted; objective: 2.93802 ---> 2.91975
Volume: 0.437916
0.0298778
Iteration 41 accepted; objective: 2.91975 ---> 2.90167
Volume: 0.434248
0.0298858
Iteration 42 accepted; objective: 2.90167 ---> 2.88437
Volume: 0.430711
0.0298934
Iteration 43 accepted; objective: 2.88437 ---> 2.86714
Volume: 0.427171
0.0302253
Iteration 44 accepted; objective: 2.86714 ---> 2.84996
Volume: 0.423576
0.0303169
Iteration 45 accepted; objective: 2.84996 ---> 2.83247
Volume: 0.419896
0.0299069
Iteration 46 accepted; objective: 2.83247 ---> 2.81537
Volume: 0.41626
0.0299076
Iteration 47 accepted; objective: 2.81537 ---> 2.79852
Volume: 0.412627
0.0299067
Iteration 48 accepted; objective: 2.79852 ---> 2.78164
Volume: 0.408933
0.0299023
Iteration 49 accepted; objective: 2.78164 ---> 2.76506
Volume: 0.405269
0.0298932
Iteration 50 accepted; objective: 2.76506 ---> 2.74823
Volume: 0.401491
0.0298815
Iteration 51 accepted; objective: 2.74823 ---> 2.73179
Volume: 0.397764
0.0302065
Iteration 52 accepted; objective: 2.73179 ---> 2.71531
Volume: 0.393981
0.0298476
Iteration 53 accepted; objective: 2.71531 ---> 2.69886
Volume: 0.390162
0.0298205
Iteration 54 accepted; objective: 2.69886 ---> 2.68267
Volume: 0.386225
0.0299841
Iteration 55 accepted; objective: 2.68267 ---> 2.66679
Volume: 0.382494
0.0297704
Iteration 56 accepted; objective: 2.66679 ---> 2.65115
Volume: 0.378821
0.0297292
Iteration 57 accepted; objective: 2.65115 ---> 2.6355
Volume: 0.375055
0.0296841
Iteration 58 accepted; objective: 2.6355 ---> 2.61999
Volume: 0.371259
0.0299426
Iteration 59 accepted; objective: 2.61999 ---> 2.60466
Volume: 0.367407
0.0298784
Iteration 60 accepted; objective: 2.60466 ---> 2.58926
Volume: 0.363601
0.0295234
Iteration 61 accepted; objective: 2.58926 ---> 2.57451
Volume: 0.359945
0.0299175
Iteration 62 accepted; objective: 2.57451 ---> 2.55965
Volume: 0.356111
0.0297218
Iteration 63 accepted; objective: 2.55965 ---> 2.54525
Volume: 0.352392
0.0299373
Iteration 64 accepted; objective: 2.54525 ---> 2.53084
Volume: 0.348625
0.0293283
Iteration 65 accepted; objective: 2.53084 ---> 2.51688
Volume: 0.344962
0.0295612
Iteration 66 accepted; objective: 2.51688 ---> 2.50352
Volume: 0.341433
0.0298765
Iteration 67 accepted; objective: 2.50352 ---> 2.48947
Volume: 0.337601
0.0297993
Iteration 68 accepted; objective: 2.48947 ---> 2.47646
Volume: 0.334122
0.0289076
Iteration 69 accepted; objective: 2.47646 ---> 2.46365
Volume: 0.330684
0.0297043
Iteration 70 accepted; objective: 2.46365 ---> 2.45143
Volume: 0.327275
0.0292365
Iteration 71 accepted; objective: 2.45143 ---> 2.43894
Volume: 0.323735
0.029644
Iteration 72 accepted; objective: 2.43894 ---> 2.42693
Volume: 0.320322
0.0299132
Iteration 73 accepted; objective: 2.42693 ---> 2.41442
Volume: 0.316662
0.0288754
Iteration 74 accepted; objective: 2.41442 ---> 2.4021
Volume: 0.312985
0.0285183
Iteration 75 accepted; objective: 2.4021 ---> 2.39117
Volume: 0.30972
0.0289771
Iteration 76 accepted; objective: 2.39117 ---> 2.3804
Volume: 0.306496
0.0292946
Iteration 77 accepted; objective: 2.3804 ---> 2.37086
Volume: 0.303647
0.0291587
Iteration 78 accepted; objective: 2.37086 ---> 2.3605
Volume: 0.300354
0.0293786
Iteration 79 accepted; objective: 2.3605 ---> 2.349
Volume: 0.296602
0.0295803
Iteration 80 accepted; objective: 2.349 ---> 2.33824
Volume: 0.293119
0.0297842
Iteration 81 accepted; objective: 2.33824 ---> 2.32858
Volume: 0.290036
0.0301034
Iteration 82 accepted; objective: 2.32858 ---> 2.31981
Volume: 0.28724
0.0296145
Iteration 83 accepted; objective: 2.31981 ---> 2.31117
Volume: 0.284392
0.0297187
Iteration 84 accepted; objective: 2.31117 ---> 2.30408
Volume: 0.282049
0.0299862
Iteration 85 accepted; objective: 2.30408 ---> 2.29365
Volume: 0.278251
0.0298863
Iteration 86 accepted; objective: 2.29365 ---> 2.28312
Volume: 0.274194
0.0300595
Iteration 87 accepted; objective: 2.28312 ---> 2.27528
Volume: 0.271606
0.0297239
Iteration 88 accepted; objective: 2.27528 ---> 2.27
Volume: 0.269878
0.0298394
Iteration 89 accepted; objective: 2.27 ---> 2.2645
Volume: 0.267723
0.0295122
Iteration 90 accepted; objective: 2.2645 ---> 2.2585
Volume: 0.265668
0.0299105
Iteration 91 accepted; objective: 2.2585 ---> 2.25106
Volume: 0.262233
0.0296576
Iteration 92 accepted; objective: 2.25106 ---> 2.24942
Volume: 0.258572
0.0297317
Iteration 93 accepted; objective: 2.24942 ---> 2.23793
Volume: 0.256515
0.0296701
Iteration 94 accepted; objective: 2.23793 ---> 2.23467
Volume: 0.256242
0.0298755
Iteration 95 accepted; objective: 2.23467 ---> 2.23602
Volume: 0.255429
0.0295787
Iteration 96 accepted; objective: 2.23602 ---> 2.22747
Volume: 0.252978
0.0293904
Iteration 97 accepted; objective: 2.22747 ---> 2.22353
Volume: 0.251467
0.0295833
Iteration 98 accepted; objective: 2.22353 ---> 2.22718
Volume: 0.249394
0.0298799
Iteration 99 accepted; objective: 2.22718 ---> 2.21617
Volume: 0.24782
0.0300125
Iteration 100 accepted; objective: 2.21617 ---> 2.21412
Volume: 0.24773
0.030119
Iteration 101 accepted; objective: 2.21412 ---> 2.21839
Volume: 0.247082
0.0303042
Iteration 102 accepted; objective: 2.21839 ---> 2.21064
Volume: 0.245154
0.0304415
Iteration 103 accepted; objective: 2.21064 ---> 2.20538
Volume: 0.244197
0.0298924
Iteration 104 accepted; objective: 2.20538 ---> 2.20893
Volume: 0.24296
0.0294511
Iteration 105 accepted; objective: 2.20893 ---> 2.20261
Volume: 0.241654
0.0297377
Iteration 106 accepted; objective: 2.20261 ---> 2.19971
Volume: 0.241584
0.0290528
Iteration 107 accepted; objective: 2.19971 ---> 2.20197
Volume: 0.241218
0.0291816
Iteration 108 accepted; objective: 2.20197 ---> 2.20174
Volume: 0.24082
0.0291109
Iteration 109 accepted; objective: 2.20174 ---> 2.19547
Volume: 0.239837
0.0298751
Iteration 110 accepted; objective: 2.19547 ---> 2.19822
Volume: 0.238716
0.0300748
Iteration 111 accepted; objective: 2.19822 ---> 2.1954
Volume: 0.237708
0.0309671
Iteration 112 accepted; objective: 2.1954 ---> 2.19103
Volume: 0.237597
0.0292585
Iteration 113 accepted; objective: 2.19103 ---> 2.19549
Volume: 0.237452
0.0297601
Iteration 114 accepted; objective: 2.19549 ---> 2.19237
Volume: 0.236599
0.0293413
Iteration 115 accepted; objective: 2.19237 ---> 2.18653
Volume: 0.235772
0.029152
Iteration 116 accepted; objective: 2.18653 ---> 2.19072
Volume: 0.234985
0.0291475
Iteration 117 accepted; objective: 2.19072 ---> 2.18876
Volume: 0.234526
0.0298458
Iteration 118 accepted; objective: 2.18876 ---> 2.18383
Volume: 0.234584
0.0291727
Iteration 119 accepted; objective: 2.18383 ---> 2.18922
Volume: 0.234602
0.0291196
Iteration 120 accepted; objective: 2.18922 ---> 2.18595
Volume: 0.233823
0.0290417
Iteration 121 accepted; objective: 2.18595 ---> 2.18062
Volume: 0.233177
0.0295825
Iteration 122 accepted; objective: 2.18062 ---> 2.18421
Volume: 0.232494
0.0293992
Iteration 123 accepted; objective: 2.18421 ---> 2.18421
Volume: 0.231682
0.0295144
Iteration 124 accepted; objective: 2.18421 ---> 2.17884
Volume: 0.23171
0.02958
Iteration 125 accepted; objective: 2.17884 ---> 2.18154
Volume: 0.231767
0.0297072
Iteration 126 accepted; objective: 2.18154 ---> 2.18028
Volume: 0.231504
0.0298024
Iteration 127 accepted; objective: 2.18028 ---> 2.17502
Volume: 0.230802
0.0298582
Iteration 128 accepted; objective: 2.17502 ---> 2.17958
Volume: 0.230172
0.0298675
Iteration 129 accepted; objective: 2.17958 ---> 2.17736
Volume: 0.229537
0.029865
Iteration 130 accepted; objective: 2.17736 ---> 2.17355
Volume: 0.229641
0.0299579
Iteration 131 accepted; objective: 2.17355 ---> 2.1798
Volume: 0.22969
0.0298834
Iteration 132 accepted; objective: 2.1798 ---> 2.1772
Volume: 0.229377
0.0299292
Iteration 133 accepted; objective: 2.1772 ---> 2.17094
Volume: 0.2288
0.0299849
Iteration 134 accepted; objective: 2.17094 ---> 2.17528
Volume: 0.228232
0.029458
Iteration 135 accepted; objective: 2.17528 ---> 2.1771
Volume: 0.227495
0.0292754
Iteration 136 accepted; objective: 2.1771 ---> 2.17064
Volume: 0.2276
0.029734
Iteration 137 accepted; objective: 2.17064 ---> 2.17331
Volume: 0.227755
0.0296978
Iteration 138 accepted; objective: 2.17331 ---> 2.17296
Volume: 0.227518
0.0291778
Iteration 139 accepted; objective: 2.17296 ---> 2.16805
Volume: 0.226877
0.0294098
Iteration 140 accepted; objective: 2.16805 ---> 2.17566
Volume: 0.226288
0.0294209
Iteration 141 accepted; objective: 2.17566 ---> 2.17502
Volume: 0.225977
0.0294155
Iteration 142 accepted; objective: 2.17502 ---> 2.16917
Volume: 0.226131
0.0291373
Iteration 143 accepted; objective: 2.16917 ---> 2.17266
Volume: 0.226207
0.0298015
Iteration 144 accepted; objective: 2.17266 ---> 2.17514
Volume: 0.22595
0.0297334
Iteration 145 accepted; objective: 2.17514 ---> 2.16738
Volume: 0.225524
0.0290592
Iteration 146 accepted; objective: 2.16738 ---> 2.16951
Volume: 0.225145
0.0298922
Iteration 147 accepted; objective: 2.16951 ---> 2.17401
Volume: 0.224803
0.0298094
Iteration 148 accepted; objective: 2.17401 ---> 2.1688
Volume: 0.224925
0.0285336
Iteration 149 accepted; objective: 2.1688 ---> 2.1697
Volume: 0.225105
0.0285196
Iteration 150 accepted; objective: 2.1697 ---> 2.16796
Volume: 0.225042
0.028507
Iteration 151 accepted; objective: 2.16796 ---> 2.16449
Volume: 0.224669
0.0298631
Iteration 152 accepted; objective: 2.16449 ---> 2.16678
Volume: 0.224218
0.0298006
Iteration 153 accepted; objective: 2.16678 ---> 2.17129
Volume: 0.223794
0.0287201
Iteration 154 accepted; objective: 2.17129 ---> 2.16642
Volume: 0.223914
0.0285135
Iteration 155 accepted; objective: 2.16642 ---> 2.16774
Volume: 0.224074
0.0285522
Iteration 156 accepted; objective: 2.16774 ---> 2.16647
Volume: 0.22396
0.0285402
Iteration 157 accepted; objective: 2.16647 ---> 2.16278
Volume: 0.223559
0.0285929
Iteration 158 accepted; objective: 2.16278 ---> 2.16676
Volume: 0.22316
0.0287275
Iteration 159 accepted; objective: 2.16676 ---> 2.17
Volume: 0.222852
0.0287611
Iteration 160 accepted; objective: 2.17 ---> 2.16349
Volume: 0.223033
0.0287148
Iteration 161 accepted; objective: 2.16349 ---> 2.16597
Volume: 0.223237
0.0287509
Iteration 162 accepted; objective: 2.16597 ---> 2.16491
Volume: 0.223153
0.0287955
Iteration 163 accepted; objective: 2.16491 ---> 2.16184
Volume: 0.222802
0.0289389
Iteration 164 accepted; objective: 2.16184 ---> 2.16504
Volume: 0.222439
0.0289564
Iteration 165 accepted; objective: 2.16504 ---> 2.16685
Volume: 0.222191
0.0289641
Iteration 166 accepted; objective: 2.16685 ---> 2.16237
Volume: 0.222342
0.0289558
Iteration 167 accepted; objective: 2.16237 ---> 2.16427
Volume: 0.22257
0.0289463
Iteration 168 accepted; objective: 2.16427 ---> 2.16506
Volume: 0.222513
0.0289081
Iteration 169 accepted; objective: 2.16506 ---> 2.1612
Volume: 0.222066
0.0289596
Iteration 170 accepted; objective: 2.1612 ---> 2.16426
Volume: 0.221737
0.0289627
Iteration 171 accepted; objective: 2.16426 ---> 2.16361
Volume: 0.22161
0.0290311
Iteration 172 accepted; objective: 2.16361 ---> 2.16035
Volume: 0.221801
0.0290517
Iteration 173 accepted; objective: 2.16035 ---> 2.16504
Volume: 0.222002
0.029089
Iteration 174 accepted; objective: 2.16504 ---> 2.16384
Volume: 0.221894
0.0290507
Iteration 175 accepted; objective: 2.16384 ---> 2.15849
Volume: 0.221573
0.0291252
Iteration 176 accepted; objective: 2.15849 ---> 2.16127
Volume: 0.221258
0.0291568
Iteration 177 accepted; objective: 2.16127 ---> 2.16382
Volume: 0.221097
0.0292156
Iteration 178 accepted; objective: 2.16382 ---> 2.15891
Volume: 0.221261
0.0292857
Iteration 179 accepted; objective: 2.15891 ---> 2.16345
Volume: 0.22148
0.0293031
Iteration 180 accepted; objective: 2.16345 ---> 2.16501
Volume: 0.221382
0.0293345
Iteration 181 rejected; inverted triangle.
Iteration 182 rejected; inverted triangle.
Iteration 183 rejected; inverted triangle.
Iteration 184 rejected; inverted triangle.
Iteration 185 rejected; inverted triangle.
Iteration 186 rejected; inverted triangle.
Iteration 187 rejected; inverted triangle.
Iteration 188 rejected; inverted triangle.
Iteration 189 rejected; inverted triangle.
Iteration 190 rejected; inverted triangle.
Iteration 191 rejected; inverted triangle.
Iteration 192 rejected; inverted triangle.
Iteration 193 rejected; inverted triangle.
Iteration 194 rejected; inverted triangle.
Iteration 195 rejected; inverted triangle.
Iteration 196 rejected; inverted triangle.
Iteration 197 rejected; inverted triangle.
Iteration 198 rejected; inverted triangle.
Iteration 199 rejected; inverted triangle.
 try getConsole D:\Documents\X\3A\P2\MAP562 Structure Optimisation\Homework\MAP562-homework\PC7\Cantilever_Geometric_Opt.edp
