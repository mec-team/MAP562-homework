-- FreeFem++ v4.400003 (jeu. 12 d√©c. 2019 13:58:15 - git v4.4-3-9-gc37e08e1)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : /* Geometric optimization of the shape of a house */
    2 : /*
    3 : Here we study the Question 1
    4 : In the case where there's only one hole, the hole will become larger and larger
    5 : and at the end occupy almost the whole domain. This is logical because the hole's
    6 : temperature is not considered by the cost function. It is thus profitable to increse
    7 : the size of the whole. However, the volume restriction does not seem to be well
    8 : respected. It may need some other more advanced treatments. Fortunately, the
    9 : objevtive function generally decreases correctly.
   10 : In the case where there's several holes, the situation is similar. The holes actually
   11 : tend to reunit as one large hole. However, it is remarkable that when the wholes
   12 : become large enough such that the boder between holes become very narrow, the variation
   13 : of the wholes stucks, so at the end the wholes may not be able to occupy the whole
   14 : domain as in the first case.
   15 : */
   16 :
   17 : load "medit"(load: loadLibary E:\FreeFem++\\.\medit = 0)
   18 :
   19 : verbosity = 0;
   20 :
   21 : /* Border of the initial domain */
   22 :
   23 : int Gamma=0,GammaW=1;
   24 : int NM = 15;
   25 :
   26 : real[int] xH = [0,2,2,1,0];
   27 : real[int] yH = [0,0,1,2,1];
   28 : int[int] numberH = NM*[2,1,1.4,1.4,1];
   29 :
   30 : border home(t=0,1; i){
   31 :    int nexti = (i+1)%xH.n;
   32 :    x = (1-t)*xH[i]+t*xH[nexti];
   33 :    y = (1-t)*yH[i]+t*yH[nexti];
   34 :    label = Gamma;
   35 : }
   36 : /*
   37 : real r = 0.3;
   38 : real cx = 1;
   39 : real cy = 0.6;
   40 : border Cercle(t=0,2*pi){
   41 :    x = r*cos(t)+cx;
   42 :    y = r*sin(t)+cy;
   43 :    label = GammaW;
   44 : }
   45 : */
   46 : border h1 (t=0.0,2.0*pi){x=0.7+0.2*cos(t); y=0.5+0.2*sin(t); label=GammaW;};
   47 : border h2 (t=0.0,2.0*pi){x=1.3+0.2*cos(t); y=0.5+0.2*sin(t); label=GammaW;};
   48 : border h3 (t=0.0,2.0*pi){x=1+0.1*cos(t); y=0.3+0.1*sin(t); label=GammaW;};
   49 : //border h4 (t=0.0,2.0*pi){x=1+0.1*cos(t); y=1.2+0.1*sin(t); label=GammaW;};
   50 :
   51 :
   52 : /* Create, then display initial mesh */
   53 : //mesh Th = buildmesh( home(numberH) + Cercle(-NM*2*pi*r));
   54 : mesh Th = buildmesh( home(numberH) + h1(-NM*2*pi*0.3) + h2(-NM*2*pi*0.3) + h3(-NM*2*pi*0.3) );
   55 : plot(Th,wait=1);
   56 :
   57 : /* Parameters */
   58 : real eps = 1.e-6;
   59 : real cply = 0.0;
   60 : real obj = 0.0,newobj = 0.0;
   61 : mesh Dh;
   62 : int nit = 200;
   63 :
   64 : real gmax;
   65 : real coef = 0.2;
   66 : real coefmax = 0.2;
   67 : real coefmin = 0.01;
   68 : real step;
   69 : real chkvoltri;
   70 : real epsvoltri = 1.e-6;
   71 : real tol = 0.01;
   72 : real tgv = 1.e10;
 *** Warning  The identifier tgv hide a Global identifier
 
   73 : real vol = 0.0;
   74 : real ell = 5.0;
   75 : string s;
   76 : real ux = 0, uy = 1;
   77 : real T1 = 100, T0 = 20;
   78 :
   79 : real[int] vals(1);
   80 :
   81 :
   82 :
   83 : /* Finite element spaces: P1 elements for the resolution of the linearized elasticity system */
   84 : fespace Vh(Th,P1);
   85 : fespace Vh0(Th,P0);
   86 :
   87 : /* Functions */
   88 : Vh   T,phit,grx,gry,ng,Told,chidir,vx,vy;
   89 : Vh   p,phip,pold;
   90 : Vh0  gr0;
   91 :
   92 : Vh0 hMax = hTriangle; // get sizes of all triangles
   93 : real meshsiz = hMax[].max; // get maximal triangle size
   94 : real alpha = (2.0*meshsiz)^2; //regularization parameter
   95 :
   96 : real sqrt2 = sqrt(2);
   97 :
   98 : macro grad(u) [dx(u),dy(u)] )  //
   99 : macro grad2(ux,uy) [dx(ux),dy(ux),dx(uy),dy(uy)] )  //
  100 :
  101 : /* Heat-Convection system */
  102 :
  103 : problem Temp(T,phit) =
  104 :    int2d(Th)(grad(T)  [dx(T),dy(T)]'*grad(phit)  [dx(phit),dy(phit)])
  105 :   +int2d(Th)([ux,uy]'*grad(T)  [dx(T),dy(T)]*phit)
  106 :   -int1d(Th,GammaW)((dx(T)*N.x+dy(T)*N.y)*phit)
  107 :   +on(Gamma,T=0)
  108 :   +on(GammaW,T=T1);
  109 :
  110 :
  111 : /* Adjoint Problem */
  112 :
  113 : problem Adjoint(p,phip) =
  114 :    int2d(Th)(grad(p)  [dx(p),dy(p)]'*grad(phip)  [dx(phip),dy(phip)])
  115 :   -int2d(Th)([ux,uy]'*grad(p)  [dx(p),dy(p)]*phip)
  116 :   +int2d(Th)(2*(T-T0)*phip)
  117 :   +on(Gamma,p=0)
  118 :   +on(GammaW,p=0);
  119 :
  120 : /* Localization function for nodes to be frozen */
  121 : func real locdir() {
  122 :   if ( ( x < y - 0.99) || ( x > 2.99 - y) || ( x < 0.01 ) || ( x > 1.99 ) || ( y < 0.01 ) ) return(1.0);
  123 :   else return(0.0);
  124 : }
  125 : chidir = locdir();
  126 :
  127 : /* Tangential derivative */
  128 : macro Dt(u) [dx(u)-(dx(u)*N.x+dy(u)*N.y)*N.x,dy(u)-(dx(u)*N.x+dy(u)*N.y)*N.y]  )  //
  129 :
  130 : /* Extension / regularization problem */
  131 : /*
  132 : problem velext([grx,gry],[vx,vy],solver=Crout) =
  133 :   int2d(Th)(mu*(2.0*dx(grx)*dx(vx) + (dx(gry)+dy(grx))*(dx(vy)+dy(vx)) + 2.0*dy(gry)*dy(vy))
  134 :                 + lambda*(dx(grx)+dy(gry))*(dx(vx)+dy(vy)) + (1.0+chidir*tgv)*(grx*vx+gry*vy) )
  135 :   + int1d(Th,Gamma)( alpha*(Dt(grx)'*Dt(vx) + Dt(gry)'*Dt(vy)) )
  136 :   - int1d(Th,Gamma)( gr0*(N.x*vx+N.y*vy) )
  137 :   + on(GammaD,GammaN,grx=0.0,gry=0.0);
  138 : */
  139 :
  140 : problem velext2([grx,gry],[vx,vy],solver=Crout) =
  141 :   int2d(Th)(grad2(grx,gry)  [dx(grx),dy(grx),dx(gry),dy(gry)]'*grad2(vx,vy)  [dx(vx),dy(vx),dx(vy),dy(vy)]
  142 : //  + int1d(Th,omega)( alpha*(Dt(grx)'*Dt(vx) + Dt(gry)'*Dt(vy)) )
  143 :  + (1.0+chidir*tgv)*(grx*vx+gry*vy) )
  144 :   - int1d(Th,GammaW)( gr0*(N.x*vx+N.y*vy) )
  145 :   + on(Gamma,grx=0.0,gry=0.0);
  146 :
  147 : /*
  148 : problem velext3([grx,gry],[vx,vy],solver=Crout) =
  149 :   int2d(Th)(2*e(grx,gry)'*e(vx,vy)+0.5*div(grx,gry)*div(vx,vy)
  150 :   + int1d(Th,omega)( alpha*(Dt(grx)'*Dt(vx) + Dt(gry)'*Dt(vy)) )
  151 : +(1.0+chidir*tgv)*(grx*vx+gry*vy) )
  152 :   - int1d(Th,GammaW)( gr0*(N.x*vx+N.y*vy) )
  153 :   + on(Gamma,grx=0.0,gry=0.0);
  154 : */
  155 :
  156 :
  157 : /* Objective function */
  158 : macro J() ( int2d(Th)((T - T0)^2) ) // EOM
  159 :
  160 :
  161 : /* (Negative) shape gradient of J */
  165 # } // EOM2;(T - T0)^2-grad(T)'*[N.x, N.y]*grad(p)'*[N.x, N.y])-ell;
  166 :
  167 : /* Initialization */
  168 : Temp;
  169 : Adjoint;
  170 : vals[0]=J       ( int2d(Th)((T - T0)^2) ) ;
  171 :
  172 : /* Initial value of the objective function */
  173 : vol     = Th.area;
  174 : obj     = J       ( int2d(Th)((T - T0)^2) )  + ell*vol;
  175 :
  176 : /* Main optimization loop */
  177 : for(int n=0; n<nit; n++){
  178 :
  179 :   /* Computation of the shape gradient as a P1 function and size of the time step */
  180 :   dJ
  163 @
  164 @
  165 @   {
  163 @   gr0 = -((T - T0)^2-grad(T)  [dx(T),dy(T)]'*[N.x, N.y]*grad(p)  [dx(p),dy(p)]'*[N.x, N.y])-ell;
  164 @   velext2;
  165 @ } ;
  181 :   ng = sqrt(grx*grx+gry*gry);
  182 :   gmax = ng[].max;
  183 :   step = coef*meshsiz / (eps^2+gmax);
  184 :
  185 :   /* Attempt motion of the mesh: if the moved mesh has an almost null or flipped element, restart the operation
with a smaller step */
  186 :   chkvoltri = checkmovemesh(Th,[x+step*grx,y+step*gry]);
  187 :
  188 :   if( chkvoltri < epsvoltri ) {
  189 :     cout<<"Iteration "<<n<<" rejected; inverted triangle."<<endl;
  190 :     coef *= 0.5;
  191 :     continue;
  192 :   }
  193 :
  194 :   /* Else, effectively move the new mesh */
  195 :     Dh = movemesh(Th,[x+step*grx,y+step*gry]);
  196 :
  197 :   /* Resolution of the state equation */
  198 :   Told = T;
  199 :   pold = p;
  200 :   Temp;
  201 :   Adjoint;
  202 :
  203 :   /* Evaluation of the new objective function */
  204 :   vol    = Th.area;
  205 :   newobj = J       ( int2d(Th)((T - T0)^2) )  + ell*vol;
  206 :
  207 :   /* Decision */
  208 :   if( newobj < obj+tol*abs(obj) || coef <= coefmin ) {
  209 :     cout<<"Iteration "<<n<<" accepted; objective: "<<obj<<" ---> "<<newobj<<endl;
  210 :     cout<<"Volume: " << vol << endl;
  211 :     obj   = newobj;
  212 :     coef  = min(coefmax,1.02*coef);
  213 :     Th    = Dh;
  214 :
  215 :     /* Adapt the mesh to the current solution of the elasticity system */
  216 :
  217 :     Th = adaptmesh(Th,[ux,uy],hmin=0.01,hmax=0.1);
  218 :
  219 :     hMax = hTriangle; // get sizes of all triangles
  220 :     meshsiz = hMax[].max; // get maximal triangle size
  221 :     cout << meshsiz << endl;
  222 :     alpha = (2.0*meshsiz)^2;
  223 :     chidir = locdir();
  224 :     plot(Th,wait=0);
  225 :     vals = [vals,newobj];
  226 :   }
  227 :   else {
  228 :     cout<<"Iteration "<<n<<" rejected; objective: "<<obj<<" v.s. "<<newobj<<endl;
  229 :     coef  = max(coefmin,0.6*coef);
  230 :     T = Told;
  231 :     p = pold;
  232 :   }
  233 : }
  234 :
  235 : /* Print mesh and solution */
  236 : //savemesh(Th,"Cantilever.mesh");
  237 : //savesol("Cantilever.sol",Th,[ux,uy]);
  238 :
  239 : real[int] dis = 1:vals.n;
  240 : plot([dis,vals],cmm="Evoluion of cost function"); sizestack + 1024 =6408  ( 5384 )
 
Iteration 0 accepted; objective: 3050.81 ---> 3050.81
Volume: 2.71962
0.147766
Iteration 1 rejected; objective: 3050.81 v.s. 3128.24
Iteration 2 rejected; objective: 3050.81 v.s. 3128.24
Iteration 3 rejected; objective: 3050.81 v.s. 3128.24
Iteration 4 rejected; objective: 3050.81 v.s. 3128.24
Iteration 5 rejected; objective: 3050.81 v.s. 3128.24
Iteration 6 rejected; objective: 3050.81 v.s. 3128.24
Iteration 7 accepted; objective: 3050.81 ---> 3128.24
Volume: 2.68475
0.14612
Iteration 8 accepted; objective: 3128.24 ---> 3126.74
Volume: 2.68247
0.145492
Iteration 9 accepted; objective: 3126.74 ---> 3129.21
Volume: 2.68011
0.144597
Iteration 10 accepted; objective: 3129.21 ---> 3129.35
Volume: 2.67771
0.144836
Iteration 11 accepted; objective: 3129.35 ---> 3129.86
Volume: 2.67527
0.143292
Iteration 12 accepted; objective: 3129.86 ---> 3130.98
Volume: 2.6729
0.142847
Iteration 13 accepted; objective: 3130.98 ---> 3131.77
Volume: 2.67038
0.142056
Iteration 14 accepted; objective: 3131.77 ---> 3131.34
Volume: 2.66781
0.141555
Iteration 15 accepted; objective: 3131.34 ---> 3131.25
Volume: 2.66521
0.14124
Iteration 16 accepted; objective: 3131.25 ---> 3130.79
Volume: 2.66255
0.140453
Iteration 17 accepted; objective: 3130.79 ---> 3131.63
Volume: 2.65984
0.140933
Iteration 18 accepted; objective: 3131.63 ---> 3135.81
Volume: 2.65761
0.13557
Iteration 19 accepted; objective: 3135.81 ---> 3136.86
Volume: 2.65478
0.1354
Iteration 20 accepted; objective: 3136.86 ---> 3137.22
Volume: 2.65199
0.135365
Iteration 21 accepted; objective: 3137.22 ---> 3137.97
Volume: 2.64915
0.135459
Iteration 22 accepted; objective: 3137.97 ---> 3138.86
Volume: 2.64623
0.135501
Iteration 23 accepted; objective: 3138.86 ---> 3138.75
Volume: 2.64325
0.135577
Iteration 24 accepted; objective: 3138.75 ---> 3139.58
Volume: 2.6402
0.135618
Iteration 25 accepted; objective: 3139.58 ---> 3139.81
Volume: 2.63709
0.135655
Iteration 26 accepted; objective: 3139.81 ---> 3140.25
Volume: 2.63389
0.135675
Iteration 27 accepted; objective: 3140.25 ---> 3140.47
Volume: 2.63063
0.135697
Iteration 28 accepted; objective: 3140.47 ---> 3140.5
Volume: 2.62729
0.135719
Iteration 29 accepted; objective: 3140.5 ---> 3140.32
Volume: 2.62388
0.135729
Iteration 30 accepted; objective: 3140.32 ---> 3140.87
Volume: 2.62038
0.135742
Iteration 31 accepted; objective: 3140.87 ---> 3140.85
Volume: 2.61681
0.135753
Iteration 32 accepted; objective: 3140.85 ---> 3141.94
Volume: 2.61316
0.135767
Iteration 33 accepted; objective: 3141.94 ---> 3143.02
Volume: 2.60943
0.135777
Iteration 34 accepted; objective: 3143.02 ---> 3143.02
Volume: 2.60568
0.135788
Iteration 35 accepted; objective: 3143.02 ---> 3143.75
Volume: 2.60185
0.135798
Iteration 36 accepted; objective: 3143.75 ---> 3144.22
Volume: 2.59786
0.135807
Iteration 37 accepted; objective: 3144.22 ---> 3143.54
Volume: 2.59378
0.133237
Iteration 38 accepted; objective: 3143.54 ---> 3144.3
Volume: 2.58961
0.133537
Iteration 39 accepted; objective: 3144.3 ---> 3143.88
Volume: 2.58542
0.134955
Iteration 40 accepted; objective: 3143.88 ---> 3143.02
Volume: 2.58114
0.136411
Iteration 41 accepted; objective: 3143.02 ---> 3142.62
Volume: 2.57671
0.143302
Iteration 42 accepted; objective: 3142.62 ---> 3142.46
Volume: 2.57212
0.139567
Iteration 43 accepted; objective: 3142.46 ---> 3142.01
Volume: 2.56721
0.141212
Iteration 44 accepted; objective: 3142.01 ---> 3141.1
Volume: 2.5623
0.142902
Iteration 45 accepted; objective: 3141.1 ---> 3140.87
Volume: 2.55723
0.144664
Iteration 46 accepted; objective: 3140.87 ---> 3139.82
Volume: 2.55198
0.146499
Iteration 47 accepted; objective: 3139.82 ---> 3138.76
Volume: 2.54654
0.148401
Iteration 48 accepted; objective: 3138.76 ---> 3137.68
Volume: 2.54091
0.131952
Iteration 49 accepted; objective: 3137.68 ---> 3136.34
Volume: 2.53507
0.132168
Iteration 50 accepted; objective: 3136.34 ---> 3135.66
Volume: 2.52974
0.132357
Iteration 51 accepted; objective: 3135.66 ---> 3135.8
Volume: 2.5243
0.132551
Iteration 52 accepted; objective: 3135.8 ---> 3134.38
Volume: 2.51876
0.132765
Iteration 53 accepted; objective: 3134.38 ---> 3132.14
Volume: 2.51307
0.135157
Iteration 54 accepted; objective: 3132.14 ---> 3130.44
Volume: 2.50731
0.135434
Iteration 55 accepted; objective: 3130.44 ---> 3128.86
Volume: 2.5013
0.135629
Iteration 56 accepted; objective: 3128.86 ---> 3130.64
Volume: 2.49555
0.135715
Iteration 57 accepted; objective: 3130.64 ---> 3131.61
Volume: 2.4896
0.135781
Iteration 58 accepted; objective: 3131.61 ---> 3127.28
Volume: 2.48274
0.13585
Iteration 59 accepted; objective: 3127.28 ---> 3124.25
Volume: 2.47605
0.135934
Iteration 60 accepted; objective: 3124.25 ---> 3121.49
Volume: 2.46918
0.135978
Iteration 61 accepted; objective: 3121.49 ---> 3118.56
Volume: 2.46217
0.136054
Iteration 62 accepted; objective: 3118.56 ---> 3115.72
Volume: 2.45498
0.136169
Iteration 63 accepted; objective: 3115.72 ---> 3112.52
Volume: 2.44764
0.136253
Iteration 64 accepted; objective: 3112.52 ---> 3108.78
Volume: 2.44011
0.136285
Iteration 65 accepted; objective: 3108.78 ---> 3105.77
Volume: 2.43246
0.136247
Iteration 66 accepted; objective: 3105.77 ---> 3108.19
Volume: 2.42534
0.136066
Iteration 67 accepted; objective: 3108.19 ---> 3103.82
Volume: 2.41727
0.136
Iteration 68 accepted; objective: 3103.82 ---> 3095.05
Volume: 2.40866
0.135085
Iteration 69 accepted; objective: 3095.05 ---> 3090.96
Volume: 2.40028
0.134688
Iteration 70 accepted; objective: 3090.96 ---> 3085.97
Volume: 2.39176
0.134365
Iteration 71 accepted; objective: 3085.97 ---> 3080
Volume: 2.38308
0.133785
Iteration 72 accepted; objective: 3080 ---> 3075.65
Volume: 2.37422
0.134715
Iteration 73 accepted; objective: 3075.65 ---> 3071.72
Volume: 2.36522
0.134444
Iteration 74 accepted; objective: 3071.72 ---> 3066.52
Volume: 2.35599
0.134769
Iteration 75 accepted; objective: 3066.52 ---> 3059.9
Volume: 2.34661
0.135441
Iteration 76 accepted; objective: 3059.9 ---> 3053.77
Volume: 2.33698
0.136118
Iteration 77 accepted; objective: 3053.77 ---> 3046.74
Volume: 2.32709
0.136797
Iteration 78 accepted; objective: 3046.74 ---> 3040.19
Volume: 2.31694
0.137478
Iteration 79 accepted; objective: 3040.19 ---> 3032.96
Volume: 2.30652
0.138163
Iteration 80 accepted; objective: 3032.96 ---> 3024.16
Volume: 2.29569
0.138846
Iteration 81 accepted; objective: 3024.16 ---> 3015.94
Volume: 2.28471
0.139522
Iteration 82 accepted; objective: 3015.94 ---> 3007.41
Volume: 2.27345
0.140201
Iteration 83 accepted; objective: 3007.41 ---> 2999.13
Volume: 2.26187
0.14088
Iteration 84 accepted; objective: 2999.13 ---> 2989.7
Volume: 2.24997
0.141549
Iteration 85 accepted; objective: 2989.7 ---> 2979.14
Volume: 2.23777
0.142212
Iteration 86 accepted; objective: 2979.14 ---> 2968.2
Volume: 2.22529
0.142851
Iteration 87 accepted; objective: 2968.2 ---> 2956.92
Volume: 2.21229
0.126841
Iteration 88 accepted; objective: 2956.92 ---> 2947.03
Volume: 2.19924
0.144038
Iteration 89 accepted; objective: 2947.03 ---> 2936.86
Volume: 2.18774
0.144667
Iteration 90 accepted; objective: 2936.86 ---> 2928.25
Volume: 2.17443
0.1453
Iteration 91 accepted; objective: 2928.25 ---> 2915.84
Volume: 2.16032
0.145929
Iteration 92 accepted; objective: 2915.84 ---> 2906.04
Volume: 2.14585
0.146556
Iteration 93 accepted; objective: 2906.04 ---> 2890.92
Volume: 2.13093
0.147164
Iteration 94 accepted; objective: 2890.92 ---> 2875.32
Volume: 2.11576
0.147749
Iteration 95 accepted; objective: 2875.32 ---> 2861.83
Volume: 2.10022
0.148298
Iteration 96 accepted; objective: 2861.83 ---> 2846.34
Volume: 2.08441
0.148806
Iteration 97 accepted; objective: 2846.34 ---> 2828.87
Volume: 2.06826
0.149285
Iteration 98 accepted; objective: 2828.87 ---> 2812.33
Volume: 2.05171
0.149731
Iteration 99 accepted; objective: 2812.33 ---> 2794.72
Volume: 2.03477
0.149936
Iteration 100 accepted; objective: 2794.72 ---> 2776.91
Volume: 2.01734
0.136349
Iteration 101 accepted; objective: 2776.91 ---> 2758.66
Volume: 1.99958
0.136968
Iteration 102 accepted; objective: 2758.66 ---> 2740.96
Volume: 1.98337
0.137595
Iteration 103 accepted; objective: 2740.96 ---> 2723.46
Volume: 1.96669
0.138221
Iteration 104 accepted; objective: 2723.46 ---> 2704.48
Volume: 1.94933
0.138842
Iteration 105 accepted; objective: 2704.48 ---> 2685.99
Volume: 1.93169
0.13946
Iteration 106 accepted; objective: 2685.99 ---> 2665.64
Volume: 1.9137
0.140078
Iteration 107 accepted; objective: 2665.64 ---> 2645.47
Volume: 1.8953
0.140702
Iteration 108 accepted; objective: 2645.47 ---> 2623.94
Volume: 1.87641
0.13222
Iteration 109 accepted; objective: 2623.94 ---> 2602.46
Volume: 1.85717
0.134501
Iteration 110 accepted; objective: 2602.46 ---> 2581.21
Volume: 1.83866
0.129648
Iteration 111 accepted; objective: 2581.21 ---> 2559.02
Volume: 1.81936
0.132217
Iteration 112 accepted; objective: 2559.02 ---> 2537.03
Volume: 1.80049
0.124126
Iteration 113 accepted; objective: 2537.03 ---> 2514.44
Volume: 1.78083
0.124579
Iteration 114 accepted; objective: 2514.44 ---> 2492.26
Volume: 1.76233
0.124542
Iteration 115 accepted; objective: 2492.26 ---> 2469.19
Volume: 1.74339
0.131196
Iteration 116 accepted; objective: 2469.19 ---> 2444.22
Volume: 1.72412
0.1249
Iteration 117 accepted; objective: 2444.22 ---> 2419.49
Volume: 1.70365
0.125064
Iteration 118 accepted; objective: 2419.49 ---> 2396.26
Volume: 1.68342
0.124952
Iteration 119 accepted; objective: 2396.26 ---> 2370.4
Volume: 1.66345
0.125459
Iteration 120 accepted; objective: 2370.4 ---> 2345.28
Volume: 1.64317
0.125334
Iteration 121 accepted; objective: 2345.28 ---> 2319.1
Volume: 1.62279
0.142211
Iteration 122 accepted; objective: 2319.1 ---> 2294.79
Volume: 1.60169
0.126241
Iteration 123 accepted; objective: 2294.79 ---> 2262.92
Volume: 1.57784
0.125224
Iteration 124 accepted; objective: 2262.92 ---> 2236.68
Volume: 1.55646
0.128363
Iteration 125 accepted; objective: 2236.68 ---> 2207.8
Volume: 1.53466
0.128934
Iteration 126 accepted; objective: 2207.8 ---> 2178.86
Volume: 1.51227
0.129544
Iteration 127 accepted; objective: 2178.86 ---> 2149.6
Volume: 1.48984
0.122387
Iteration 128 accepted; objective: 2149.6 ---> 2120.31
Volume: 1.46735
0.128152
Iteration 129 accepted; objective: 2120.31 ---> 2092.02
Volume: 1.44593
0.137697
Iteration 130 accepted; objective: 2092.02 ---> 2064.26
Volume: 1.42407
0.132227
Iteration 131 accepted; objective: 2064.26 ---> 2033.55
Volume: 1.40044
0.12938
Iteration 132 accepted; objective: 2033.55 ---> 2001.56
Volume: 1.37669
0.128015
Iteration 133 accepted; objective: 2001.56 ---> 1972.07
Volume: 1.3531
0.124439
Iteration 134 accepted; objective: 1972.07 ---> 1937.63
Volume: 1.32844
0.127734
Iteration 135 accepted; objective: 1937.63 ---> 1904.98
Volume: 1.30381
0.12932
Iteration 136 accepted; objective: 1904.98 ---> 1871.27
Volume: 1.27968
0.126739
Iteration 137 accepted; objective: 1871.27 ---> 1835.85
Volume: 1.25447
0.136163
Iteration 138 accepted; objective: 1835.85 ---> 1799.6
Volume: 1.2289
0.134279
Iteration 139 accepted; objective: 1799.6 ---> 1758.77
Volume: 1.19901
0.132873
Iteration 140 accepted; objective: 1758.77 ---> 1720.01
Volume: 1.17178
0.131598
Iteration 141 accepted; objective: 1720.01 ---> 1686.15
Volume: 1.14741
0.130909
Iteration 142 accepted; objective: 1686.15 ---> 1651.34
Volume: 1.12207
0.136831
Iteration 143 accepted; objective: 1651.34 ---> 1618.48
Volume: 1.09687
0.131212
Iteration 144 accepted; objective: 1618.48 ---> 1581.94
Volume: 1.06902
0.132817
Iteration 145 accepted; objective: 1581.94 ---> 1534.32
Volume: 1.03595
0.135604
Iteration 146 accepted; objective: 1534.32 ---> 1487.17
Volume: 1.00031
0.138511
Iteration 147 accepted; objective: 1487.17 ---> 1436.25
Volume: 0.96261
0.142168
Iteration 148 accepted; objective: 1436.25 ---> 1381.41
Volume: 0.92204
0.145968
Iteration 149 accepted; objective: 1381.41 ---> 1319.87
Volume: 0.879032
0.14807
Iteration 150 accepted; objective: 1319.87 ---> 1253.22
Volume: 0.831387
0.113696
Iteration 151 rejected; inverted triangle.
Iteration 152 rejected; inverted triangle.
Iteration 153 rejected; inverted triangle.
Iteration 154 rejected; inverted triangle.
Iteration 155 rejected; inverted triangle.
Iteration 156 rejected; inverted triangle.
Iteration 157 rejected; inverted triangle.
Iteration 158 rejected; inverted triangle.
Iteration 159 rejected; inverted triangle.
Iteration 160 rejected; inverted triangle.
Iteration 161 rejected; inverted triangle.
Iteration 162 rejected; inverted triangle.
Iteration 163 rejected; inverted triangle.
Iteration 164 rejected; inverted triangle.
Iteration 165 rejected; inverted triangle.
Iteration 166 rejected; inverted triangle.
Iteration 167 rejected; inverted triangle.
Iteration 168 rejected; inverted triangle.
Iteration 169 rejected; inverted triangle.
Iteration 170 rejected; inverted triangle.
Iteration 171 rejected; inverted triangle.
Iteration 172 rejected; inverted triangle.
Iteration 173 rejected; inverted triangle.
Iteration 174 rejected; inverted triangle.
Iteration 175 rejected; inverted triangle.
Iteration 176 rejected; inverted triangle.
Iteration 177 rejected; inverted triangle.
Iteration 178 rejected; inverted triangle.
Iteration 179 rejected; inverted triangle.
Iteration 180 rejected; inverted triangle.
Iteration 181 rejected; inverted triangle.
Iteration 182 rejected; inverted triangle.
Iteration 183 rejected; inverted triangle.
Iteration 184 rejected; inverted triangle.
Iteration 185 rejected; inverted triangle.
Iteration 186 rejected; inverted triangle.
Iteration 187 rejected; inverted triangle.
Iteration 188 rejected; inverted triangle.
Iteration 189 rejected; inverted triangle.
Iteration 190 rejected; inverted triangle.
Iteration 191 rejected; inverted triangle.
Iteration 192 rejected; inverted triangle.
Iteration 193 rejected; inverted triangle.
Iteration 194 rejected; inverted triangle.
Iteration 195 rejected; inverted triangle.
Iteration 196 rejected; inverted triangle.
Iteration 197 rejected; inverted triangle.
Iteration 198 rejected; inverted triangle.
Iteration 199 rejected; inverted triangle.
 try getConsole F:\github-clone\MAP562-homework\PC7\house.edp
