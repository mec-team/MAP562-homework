//Homework 3 Exercise 2.3 Case 3 forces by Yucheng BU and Huihui ZHOU

real R = 2;
real r = 0.3;
real TOL = 1e-6;

real hmin = 0.1;
real hmax = 1;
real h0   = 0.5;

real alpha = 1;

int maxiter = 30;
int iter;
verbosity = 0;

real lag,lagmin,lagmax;
real vol0=h0,vol;

int NN = 5;

real E=2;			// Young modulus
real nu=0.3;			// Poisson coefficient (between -1 and 1/2)

real lambda=E*nu/((1.+nu)*(1.-2.*nu));
real mu=E/(2.*(1.+nu));


int GammaD = 0,GammaN1 = 1,GammaN2 = 2,GammaN3 = 3,Gamma = 100;

border left(t=1,0)   {x=0;y=t;label=Gamma;}
border right(t=0,1)   {x=2;y=t;label=Gamma;}
border top(t=2,0) {x=t;y=1;label=Gamma;}
border sd1(t=0,0.1)   {x=t;y=0;label=GammaD;}
border s1(t=0.1,0.4)  {x=t;y=0;label=Gamma;}
border s2(t=0.4,0.7)  {x=t;y=0;label=GammaN2;}
border s3(t=0.7,0.85) {x=t;y=0;label=Gamma;}
border s4(t=0.85,1.15){x=t;y=0;label=GammaN1;}
border s5(t=1.15,1.3) {x=t;y=0;label=Gamma;}
border s6(t=1.3,1.6)  {x=t;y=0;label=GammaN3;}
border s7(t=1.6,1.9)    {x=t;y=0;label=Gamma;}
border sd2(t=1.9,2)    {x=t;y=0;label=GammaD;}

mesh Th = buildmesh(left(10*NN)+sd1(NN)+s1(3*NN)+s2(3*NN)+s3(1.5*NN)+s4(3*NN)+s5(1.5*NN)+s6(3*NN)+s7(3*NN)+sd2(NN)+right(10*NN)+top(20*NN));
plot(Th,wait=1);

fespace Vh0(Th,P0);
fespace Vh2(Th,[P2,P2]);

Vh2 [u,v],[w,s],[u1,v1],[u2,v2],[u3,v3];
Vh0 h,hold,density,newh;
Vh0 Aeueu;

Vh2 [gx1,gy1],[gx2,gy2],[gx3,gy3];

[gx1,gy1] = [0,-1];
[gx2,gy2] = [0,-1];
[gx3,gy3] = [0,-1];


h = 1+0.1*x^2;
real avg = 1/Th.area*int2d(Th)(h);

h = h-avg+h0;

real sqrt2 = sqrt(2);
int[int] k(3);

macro e(u,v) [dx(u),dy(v),(dx(v)+dy(u))/sqrt2]//
macro div(u,v) (dx(u)+dy(v))//

problem elasticity([u,v],[w,s]) =
    int2d(Th)(2.*mu*h*e(u,v)'*e(w,s)
             +h*lambda*div(u,v)*div(w,s))
    -int1d(Th,GammaN1)((gx1*w+gy1*s))
    -int1d(Th,GammaN2)((gx2*w+gy2*s))
    -int1d(Th,GammaN3)((gx3*w+gy3*s))
    +on(GammaD,u=0,v=0);

elasticity;

//plot([u,v]);

real compliance = int1d(Th,GammaN1)(gx1*u+gy1*v)
                  +int1d(Th,GammaN2)(gx2*u+gy2*v)
                  +int1d(Th,GammaN3)(gx3*u+gy3*v);

cout << "Compliance: " << compliance << endl;

// Macro for truncation
macro trunc(u,mm,MM) min(max(u,mm),MM)// END of macro

real[int] vals(1);
vals[0]=compliance;

for(iter=1;iter<maxiter;iter++){

  Aeueu = h^2*(2*mu*e(u,v)'*e(u,v)+lambda*div(u,v)*div(u,v));

  // upper bound lagmax
  lagmax = Aeueu[].max/hmin^2;
  newh = trunc(sqrt(1/lagmax*Aeueu),hmin,hmax);
  /*vol = vol0-1;
  while(vol<vol0){
    lag = lagmax/2;
    newh = trunc(sqrt(1/lag*Aeueu),hmin,hmax);
    vol  = 1/Th.area*int2d(Th)(newh);
    if(vol<vol0){lagmax=lagmax/2;}
    else{break;}
  }*/
  cout <<"Lagmax: " << lagmax << "  Min: " << newh[].min << "   Max: " << newh[].max << endl;

  // lower bound lagmin
  lagmin = Aeueu[].min/hmax^2;
  newh = trunc(sqrt(1/lagmin*Aeueu),hmin,hmax);
  /*vol = vol0+1;
  while(vol>vol0){
    lag = lagmin*2;
    newh = trunc(sqrt(1/lag*Aeueu),hmin,hmax);
    vol  = 1/Th.area*int2d(Th)(newh);
    if(vol>vol0){lagmin=lagmin*2;}
    else{break;}
  }*/
  cout <<"Lagmin: " << lagmin << " Min: " << newh[].min << "   Max: " << newh[].max << endl;

  // dichotomy

  while(abs(lagmax-lagmin)>TOL || abs(vol-vol0)>TOL){
     lag = 0.5*(lagmax+lagmin);   // look at midpoint
     newh =  trunc(sqrt(1/lag*Aeueu),hmin,hmax);
     vol = 1/Th.area*int2d(Th)(newh);
     if(vol<vol0){
        lagmax = lag;
     }
     else{
        lagmin = lag;
     }
  }
  hold = h;
  h =  trunc(sqrt(1/lag*Aeueu),hmin,hmax);
  vol = 1/Th.area*int2d(Th)(h);
  //lagmin = Aeueu[].

  elasticity;
  compliance = int1d(Th,GammaN1)(gx1*u+gy1*v)
                    +int1d(Th,GammaN2)(gx2*u+gy2*v)
                    +int1d(Th,GammaN3)(gx3*u+gy3*v);
  vals = [vals,compliance];

  cout << "Iteration #" << iter << " | Compliance " << compliance << "   Vol frac. " << vol << endl;
  //exit(0);

  plot(h,fill=1,value=1,wait=0);

  // stopping criterion
  Vh0 diff = abs(h-hold);
  if(diff[].max<TOL){break;}

}

real[int] dis = 1:vals.n;
plot(h,fill=1,value=1,cmm ="Final h", wait=1);

plot([dis,vals],cmm="Evoluion of cost function");

/*
The results obtained in the single-load case and the multi-load case are different.
And that's because our objective is different. In the single-load case we try to
optimise the deformation caused by three forces applied simultaneously. In the
multi-load case, we compromise among three cases where only one border force is
active in each case. The objective function (the compliance) of these two cases
are thus different. For the single-load case, we apply three forces to the system
at the same time and calculate directly the compliance. For the multi-load case,
we optimise the sum of the compliance of the three sub-cases (only one force in
each one). But the compliance caused by each force cannot be linearly added to get
the compliance of three forces, so we get different results for these two cases.
*/
