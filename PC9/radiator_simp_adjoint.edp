// Optimal radiator                  //
//                                   //
// Ecole Polytechnique, MAP 562      //
// Copyright G. Allaire, 2004        //
// 	     		 	     //
// modified by T. Wick, N. Spillane, B. Bogosel  //


//Problem parameters
int niter=200;			// Number of total iterations
int npen= 50;			// Starting iterations without penalization
int n=7;			// Size of the mesh
real lagrange=1.;		// Lagrange multiplier for the volume
real lagmin, lagmax ;		// Lower and upper bounds of the Lagrange multiplier
int inddico ;	    		// Counter of iterations of the dichonomy problem
real objectivefct;		// Objective function 
real volume0;			// Initial volume
real volume,volume1;		// Current volume
real maxstep = 1;

real p = 1;

verbosity = 0;

real hmin = 0.;
real hmax = 1;
real TOL = 1e-6;

real step = 0.1;

// Some output commands
string caption;			// caption for graphical outputs
real[int] vviso(21);
for (int i=0;i<21;i++)
vviso[i]=i*0.05 ;

// applied forces on the top boundary
func g=1;  			// Temperature flux


/////////////////////////////////
// Defining the two phases
// and the characteristic function theta
/////////////////////////////////
real alpha=0.01;
real beta=10;
func theta0=(x>0.1)*(x<0.9)*(y<0.9) ;



//////////////////////////////// 	1:Dirichlet condition
// Definition of the domain   // 	2:Neumann condition
//////////////////////////////// 	3:Non-homogen. Neumann (temp. flux)
mesh Th ;

int GammaD=1,GammaN=2,Gamma=3;

border bd(t=0,1)   { x=1; y=t;label=Gamma; };     // Right boundary
border bg(t=1,0)   { x=0; y=t;label=Gamma; };     // Left boundary
border bs(t=1,0)   { x=t; y=1;label=GammaN; };     // Top boundary
border b1(t=0,0.1)   { x=t; y=0;label=GammaD; };   // Bottom boundary
border b2(t=0.1,0.9)   { x=t; y=0;label=Gamma; }; // Inner boundary
border b3(t=0.9,1)   { x=t; y=0;label=GammaD; };   // Inner boundary


//////////////////////////////
// Construction of the mesh //
//////////////////////////////
Th= buildmesh (bd(10*n)+bs(10*n)+bg(10*n)+b1(1*n)+b2(8*n)+b3(1*n));
plot(Th,wait=0); 


//////////////////////////////////
// Defining the finite elements //
//////////////////////////////////

fespace Vh0(Th,P0);			
fespace Vh2(Th,P2);			

// Solution variable: T
// Test function: v
Vh2 T,v;

// P0-space (constants) for 
// the characteristic functions 
// and the density (similar to geometric optimization)
Vh0 theta,density, thetb,A,tau,gradient,thetaold;


////////////////////////////////////
// Proportions of the two phases  //
////////////////////////////////////
theta = 0.3;//1-theta0;//1-0.280379;//theta0 ;


///////////////////////////////
// Implementation of the PDE //
///////////////////////////////

macro grad(u) [dx(u),dy(u)]//

problem conduction(T,v) =
    int2d(Th)(A*(grad(T)'*grad(v)))
   -int1d(Th,GammaN)(g*v)	           
    +on(GammaD,T=0)
;

Vh2 pp;
problem adjoint(pp,v) = 
    int2d(Th)(A*(grad(pp)'*grad(v)))
   +int1d(Th,GammaN)(2*T*v)
   +on(GammaD,pp=0);

////////////////////////////////
// In the following, we perform
// the initialization of the 
// volume and the objective function
////////////////////////////////

// Initial volume
volume0=int2d(Th)(theta);

// Solve once the PDE in order 
// to get the initial temperature field.
// This temperature is then used 
// to initialize the objective function.
A= (alpha*(1-(theta)^p)+beta*(theta)^p);
conduction;
adjoint;

// Compute the objective function
objectivefct = int1d(Th,GammaN)(g*T);
cout<<"Initialization. Objective fct = "<<objectivefct<<" Volume = "<<volume0<<endl;


// Update the thetb (phase 2)

// Visualization
int iter;
iter=0;
caption="Iteration "+iter+", Objective fct= "+objectivefct+", Volume="+volume0;
plot(Th,theta,fill=1,value=0,viso=vviso,cmm=caption,wait=0); 

// Macro for truncation
macro trunc(u,mm,MM) min(max(u,mm),MM)// END of macro

// Macro for projection on the integral constraint

// !!!! Do not write comments with "//" in macros since this 
// terminates a macro in FreeFem. Use /*...*/ instead if you want
macro proj(u,u0,Vh) { 
   real tmin = hmin-u[].max,tmax = hmax+u[].min;
   u  = trunc(u,hmin,hmax);
   real v0 = 1/Th.area*int2d(Th)(u);
   while(tmax-tmin>TOL&&abs(v0-u0)>TOL){
     real tmid = 0.5*(tmin+tmax);
     Vh testu = trunc(tmid+u,hmin,hmax); 
     v0 = 1/Th.area*int2d(Th)(testu);
     if(v0<u0){
       tmin = tmid;
     } 
     else{
       tmax = tmid;
     }
     /*cout << tmin << " " << tmax << " " << v0-u0 << endl;*/
     /*cout << v0 << " " << u0 << endl;*/
   }
   u = trunc(u+tmin,hmin,hmax); 
}// END of macro



// Optimization loop		 //
 
real objold;
objold = objectivefct;
Vh2 Told,Pold;

real[int] vals(niter);
vals[0] = objectivefct;
int accept;

Pold = pp;
Told = T;

thetaold = theta;
for (iter=1;iter< niter;iter=iter+1)  
{
accept = 0;
cout <<"Iteration " <<iter <<" ----------------------------------------" <<endl;



// Computing the energy density
gradient = p*(theta)^(p-1)*(beta-alpha)*(grad(T)'*grad(pp));

// Update the proportions of the two phases and 
// project them onto their limit values if necessary
theta = thetaold-step*gradient;

// Apply penalization (slide 67 in lecture chapter7.pdf), once 
// the "initial" number of iterations has been exceeded.
//if (iter > npen) { theta = ( 1 - cos(pi*theta) )/2 ; };


proj(theta,volume0/Th.area,Vh0);

if(iter==npen){
  p = 2;accept=1;
}

if(iter==(npen+50)){
  p = 2.5;accept=1;
}

if(iter==(npen+100)){
  p = 3;accept=1;
}

// After having computed all constraints
// and the proportions of the two phases, we 
// solve the PDE (i.e., the thermal problem)
A= (alpha*(1-(theta)^p)+beta*(theta)^p);
conduction;
//plot(T,wait=1);

// Evaluate the cost functional
objectivefct=int1d(Th,GammaN)(g*T);
vals[iter] = objectivefct;
cout<<"Objective fct: "<<objectivefct<<" Volume: "<<volume <<endl;

if(objectivefct<objold|| accept==1){
   adjoint;
   Told = T;
   Pold = pp;
   thetaold = theta;
   objold = objectivefct;
   step = 1.1*step;
   step = min(step,maxstep);

   // Finally we update the proportion
   volume = int2d(Th)(theta);
   caption="Iteration "+iter+", Objective fct "+objectivefct+", Volume="+volume;
   plot(theta,fill=1,value=0,viso=vviso,cmm=caption,wait=0); 

}
else{ 
   cout << "Reject " << endl;
   iter = iter-1;
   step = step/2;
   T = Told;
   pp = Pold;
   theta = thetaold;
}

cout << "Step=" << step << endl;
cout << "Theta min=" << theta[].min << "Theta max=" << theta[].max << endl;
}; // end of the optimization loop


// Final updates and visualization
thetb=1-theta ;

caption="Final Shape, Iteration "+iter+", Objective fct "+objectivefct+", Volume="+volume;
plot(Th,thetb,fill=1,viso=vviso,cmm=caption);

real[int] dis(niter);
dis = 1:niter;
plot([dis,vals],cmm="Cost function evolution");
